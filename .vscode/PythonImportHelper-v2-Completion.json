[
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "git",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "git",
        "description": "git",
        "detail": "git",
        "documentation": {}
    },
    {
        "label": "RotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "get_current_version",
        "kind": 2,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "def get_current_version():\n    try:\n        with open(\"VERSION\", \"r\") as version_file:\n            current_version = version_file.read().strip()\n            return current_version\n    except FileNotFoundError:\n        logging.error(\n            \"The VERSION file was not found. Please provide the correct path or create a file.\"\n        )\n        return None",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "update_current_version",
        "kind": 2,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "def update_current_version(new_version):\n    with open(\"VERSION\", \"w\") as version_file:\n        version_file.write(new_version)\ndef check_for_updates(current_version):\n    latest_version_url = f\"{repo_url}/releases/latest\"\n    try:\n        response = requests.get(latest_version_url)\n        response.raise_for_status()\n        latest_version_tag = response.url.split(\"/\")[-1]\n        if latest_version_tag != current_version:",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "check_for_updates",
        "kind": 2,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "def check_for_updates(current_version):\n    latest_version_url = f\"{repo_url}/releases/latest\"\n    try:\n        response = requests.get(latest_version_url)\n        response.raise_for_status()\n        latest_version_tag = response.url.split(\"/\")[-1]\n        if latest_version_tag != current_version:\n            print(f\"New version available: {latest_version_tag}\")\n            logging.info(f\"New version available: {latest_version_tag}\")\n            return True",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "update_from_repo",
        "kind": 2,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "def update_from_repo(repo_url, local_path=\".\"):\n    try:\n        # Проверяем, существует ли локальный репозиторий\n        if os.path.exists(os.path.join(local_path, \".git\")):\n            # Локальный репозиторий существует, обновляем его\n            repo = git.Repo(local_path)\n            origin = repo.remotes.origin\n            origin.fetch()\n            origin.pull()\n            print(\"Update from repository completed successfully.\")",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "load_configuration",
        "kind": 2,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "def load_configuration(config_yaml_file_path, config_json_file_path):\n    if config_yaml_file_path.is_file() and config_json_file_path.is_file():\n        logging.info(\n            \"Both YAML and JSON configuration files exist. Please use only one format.\",\n        )\n    if config_yaml_file_path.is_file():\n        with open(config_yaml_file_path, \"r\", encoding=\"utf-8\") as yaml_file:\n            config = yaml.safe_load(yaml_file)\n    elif config_json_file_path.is_file():\n        with open(config_json_file_path, \"r\") as json_file:",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "kind": 2,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "def setup_logging():\n    # Настройка логгера\n    logger = logging.getLogger()\n    logger.setLevel(logging.INFO)\n    # Создание форматтера\n    formatter = logging.Formatter(\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Создание консольного обработчика\n    console_handler = logging.StreamHandler()\n    console_handler.setFormatter(formatter)\n    logger.addHandler(console_handler)",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "parse_arguments",
        "kind": 2,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "def parse_arguments():\n    parser = argparse.ArgumentParser(\n        description=\"Run Speedtest and insert data into GraphQL.\"\n    )\n    parser.add_argument(\n        \"-d\", \"--daemon\", action=\"store_true\", help=\"Run the script as a daemon.\"\n    )\n    return parser.parse_args()\n# Определение, является ли процесс демоном\nis_daemon = len(os.sys.argv) > 2 and os.sys.argv[2] == \"daemon\"",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "generate_graphql_endpoint",
        "kind": 2,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "def generate_graphql_endpoint():\n    graphql_config = config[\"graphql\"]\n    return f\"{graphql_config['protocol']}://{graphql_config['url']}:{graphql_config['port']}{graphql_config['endpoint']}\"\nendpoint = generate_graphql_endpoint()\n# Конвертация времени из UTC в локальное\ndef convert_utc_to_local(timestamp_utc):\n    timestamp_datetime = datetime.strptime(timestamp_utc, \"%Y-%m-%dT%H:%M:%S%z\")\n    timestamp_local = timestamp_datetime.astimezone(local_tz)\n    return timestamp_local.strftime(\"%Y-%m-%dT%H:%M:%S%z\")\n# Получение информации о системе",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "convert_utc_to_local",
        "kind": 2,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "def convert_utc_to_local(timestamp_utc):\n    timestamp_datetime = datetime.strptime(timestamp_utc, \"%Y-%m-%dT%H:%M:%S%z\")\n    timestamp_local = timestamp_datetime.astimezone(local_tz)\n    return timestamp_local.strftime(\"%Y-%m-%dT%H:%M:%S%z\")\n# Получение информации о системе\ndef get_system_info():\n    hostname = platform.node()\n    os_version = platform.version()\n    os_release = platform.release()\n    os_type = platform.system()",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "get_system_info",
        "kind": 2,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "def get_system_info():\n    hostname = platform.node()\n    os_version = platform.version()\n    os_release = platform.release()\n    os_type = platform.system()\n    return f\"{hostname} {os_type} {os_version} {os_release}\"\n# Вставка данных в GraphQL с логированием\ndef insert_data(result):\n    station, branch, latitude, longitude, type, login, vlan, ip, tp = (\n        config[\"global\"][\"client\"][\"station\"],",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "insert_data",
        "kind": 2,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "def insert_data(result):\n    station, branch, latitude, longitude, type, login, vlan, ip, tp = (\n        config[\"global\"][\"client\"][\"station\"],\n        config[\"global\"][\"client\"][\"branch\"],\n        config[\"global\"][\"client\"][\"location\"][\"latitude\"],\n        config[\"global\"][\"client\"][\"location\"][\"longitude\"],\n        config[\"global\"][\"connection\"][\"type\"],\n        config[\"global\"][\"connection\"][\"login\"],\n        config[\"global\"][\"connection\"][\"vlan\"],\n        config[\"global\"][\"connection\"][\"ip\"],",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "get_speedtest_command",
        "kind": 2,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "def get_speedtest_command():\n    cmd_key = (\n        \"commandStringWin\"\n        if platform.system().lower() == \"windows\"\n        else \"commandString\"\n    )\n    return f'{exe_file_path}/{config[\"speedtest\"][cmd_key]}'\n# Получение задержки\ndef get_delay(interval):\n    return int(interval * (0.75 + 0.5 * (0.5 - 1) * 2))",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "get_delay",
        "kind": 2,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "def get_delay(interval):\n    return int(interval * (0.75 + 0.5 * (0.5 - 1) * 2))\n# Таймер обратного отсчета с использованием tqdm для индикации\ndef countdown_timer(seconds):\n    # Установка обработчика сигнала Ctrl+C\n    signal.signal(signal.SIGINT, signal_handler)\n    for remaining_time in tqdm(range(seconds, 0, -1), desc=\"Next run\", unit=\"s\"):\n        time.sleep(1)\n        if is_daemon and remaining_time == 1:\n            execute_speedtest()",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "countdown_timer",
        "kind": 2,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "def countdown_timer(seconds):\n    # Установка обработчика сигнала Ctrl+C\n    signal.signal(signal.SIGINT, signal_handler)\n    for remaining_time in tqdm(range(seconds, 0, -1), desc=\"Next run\", unit=\"s\"):\n        time.sleep(1)\n        if is_daemon and remaining_time == 1:\n            execute_speedtest()\n# Ваша функция execute_speedtest\ndef execute_speedtest():\n    try:",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "execute_speedtest",
        "kind": 2,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "def execute_speedtest():\n    try:\n        cmd = get_speedtest_command()\n        # Добавление прогресс-бара tqdm\n        with tqdm(total=100, unit=\"\", dynamic_ncols=True) as progress_bar:\n            process = subprocess.Popen(\n                cmd,\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n                universal_newlines=True,",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "handle_speedtest_output",
        "kind": 2,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "def handle_speedtest_output(stdout, progress_bar):\n    for line in stdout:\n        try:\n            data = json.loads(line.strip())\n            if data.get(\"type\") == \"ping\" in data:\n                # Ваш код обработки данных о прогрессе здесь\n                # Пример: обновление прогресса tqdm\n                progress_bar.update(data[\"ping\"][\"progress\"] * 100)\n                # Обновление описания прогресс-бара\n                progress_bar.set_description(",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "signal_handler",
        "kind": 2,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "def signal_handler(sig, frame):\n    logging.info(\"Received Ctrl+C. Exiting gracefully...\")\n    exit()\n# Установка обработчика сигнала Ctrl+C\nsignal.signal(signal.SIGINT, signal_handler)\nif __name__ == \"__main__\":\n    args = parse_arguments()\n    is_daemon = args.daemon\n    execute_speedtest()",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "script_directory",
        "kind": 5,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "script_directory = Path(__file__).resolve().parent\nlog_file_path = script_directory / \"logs\"\nlog_file_name = \"isl.log\"\nconfig_yaml_file_path = script_directory / \"config.yaml\"\nconfig_json_file_path = script_directory / \"config\" / \"default.json\"\nexe_file_path = script_directory / \"bin\"\nlog_directory = log_file_path.parent\nlog_directory.mkdir(parents=True, exist_ok=True)\n#\nrepo_url = \"https://github.com/UniTTC/isl-client\"",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "log_file_path",
        "kind": 5,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "log_file_path = script_directory / \"logs\"\nlog_file_name = \"isl.log\"\nconfig_yaml_file_path = script_directory / \"config.yaml\"\nconfig_json_file_path = script_directory / \"config\" / \"default.json\"\nexe_file_path = script_directory / \"bin\"\nlog_directory = log_file_path.parent\nlog_directory.mkdir(parents=True, exist_ok=True)\n#\nrepo_url = \"https://github.com/UniTTC/isl-client\"\ndef get_current_version():",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "log_file_name",
        "kind": 5,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "log_file_name = \"isl.log\"\nconfig_yaml_file_path = script_directory / \"config.yaml\"\nconfig_json_file_path = script_directory / \"config\" / \"default.json\"\nexe_file_path = script_directory / \"bin\"\nlog_directory = log_file_path.parent\nlog_directory.mkdir(parents=True, exist_ok=True)\n#\nrepo_url = \"https://github.com/UniTTC/isl-client\"\ndef get_current_version():\n    try:",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "config_yaml_file_path",
        "kind": 5,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "config_yaml_file_path = script_directory / \"config.yaml\"\nconfig_json_file_path = script_directory / \"config\" / \"default.json\"\nexe_file_path = script_directory / \"bin\"\nlog_directory = log_file_path.parent\nlog_directory.mkdir(parents=True, exist_ok=True)\n#\nrepo_url = \"https://github.com/UniTTC/isl-client\"\ndef get_current_version():\n    try:\n        with open(\"VERSION\", \"r\") as version_file:",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "config_json_file_path",
        "kind": 5,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "config_json_file_path = script_directory / \"config\" / \"default.json\"\nexe_file_path = script_directory / \"bin\"\nlog_directory = log_file_path.parent\nlog_directory.mkdir(parents=True, exist_ok=True)\n#\nrepo_url = \"https://github.com/UniTTC/isl-client\"\ndef get_current_version():\n    try:\n        with open(\"VERSION\", \"r\") as version_file:\n            current_version = version_file.read().strip()",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "exe_file_path",
        "kind": 5,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "exe_file_path = script_directory / \"bin\"\nlog_directory = log_file_path.parent\nlog_directory.mkdir(parents=True, exist_ok=True)\n#\nrepo_url = \"https://github.com/UniTTC/isl-client\"\ndef get_current_version():\n    try:\n        with open(\"VERSION\", \"r\") as version_file:\n            current_version = version_file.read().strip()\n            return current_version",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "log_directory",
        "kind": 5,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "log_directory = log_file_path.parent\nlog_directory.mkdir(parents=True, exist_ok=True)\n#\nrepo_url = \"https://github.com/UniTTC/isl-client\"\ndef get_current_version():\n    try:\n        with open(\"VERSION\", \"r\") as version_file:\n            current_version = version_file.read().strip()\n            return current_version\n    except FileNotFoundError:",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "repo_url",
        "kind": 5,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "repo_url = \"https://github.com/UniTTC/isl-client\"\ndef get_current_version():\n    try:\n        with open(\"VERSION\", \"r\") as version_file:\n            current_version = version_file.read().strip()\n            return current_version\n    except FileNotFoundError:\n        logging.error(\n            \"The VERSION file was not found. Please provide the correct path or create a file.\"\n        )",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "config = load_configuration(config_yaml_file_path, config_json_file_path)\n# Настройка логирования\ndef setup_logging():\n    # Настройка логгера\n    logger = logging.getLogger()\n    logger.setLevel(logging.INFO)\n    # Создание форматтера\n    formatter = logging.Formatter(\"%(asctime)s - %(levelname)s - %(message)s\")\n    # Создание консольного обработчика\n    console_handler = logging.StreamHandler()",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "minimum_interval_s",
        "kind": 5,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "minimum_interval_s = 900\ninterval_s = max(config[\"speedtest\"][\"intervalSec\"], minimum_interval_s)\ninterval_ms = interval_s * 1000\ndef parse_arguments():\n    parser = argparse.ArgumentParser(\n        description=\"Run Speedtest and insert data into GraphQL.\"\n    )\n    parser.add_argument(\n        \"-d\", \"--daemon\", action=\"store_true\", help=\"Run the script as a daemon.\"\n    )",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "interval_s",
        "kind": 5,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "interval_s = max(config[\"speedtest\"][\"intervalSec\"], minimum_interval_s)\ninterval_ms = interval_s * 1000\ndef parse_arguments():\n    parser = argparse.ArgumentParser(\n        description=\"Run Speedtest and insert data into GraphQL.\"\n    )\n    parser.add_argument(\n        \"-d\", \"--daemon\", action=\"store_true\", help=\"Run the script as a daemon.\"\n    )\n    return parser.parse_args()",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "interval_ms",
        "kind": 5,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "interval_ms = interval_s * 1000\ndef parse_arguments():\n    parser = argparse.ArgumentParser(\n        description=\"Run Speedtest and insert data into GraphQL.\"\n    )\n    parser.add_argument(\n        \"-d\", \"--daemon\", action=\"store_true\", help=\"Run the script as a daemon.\"\n    )\n    return parser.parse_args()\n# Определение, является ли процесс демоном",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "is_daemon",
        "kind": 5,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "is_daemon = len(os.sys.argv) > 2 and os.sys.argv[2] == \"daemon\"\n# Определение временной зоны\nlocal_tz = pytz.timezone(\"Asia/Almaty\")\n# Генерация конечной точки GraphQL\ndef generate_graphql_endpoint():\n    graphql_config = config[\"graphql\"]\n    return f\"{graphql_config['protocol']}://{graphql_config['url']}:{graphql_config['port']}{graphql_config['endpoint']}\"\nendpoint = generate_graphql_endpoint()\n# Конвертация времени из UTC в локальное\ndef convert_utc_to_local(timestamp_utc):",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "local_tz",
        "kind": 5,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "local_tz = pytz.timezone(\"Asia/Almaty\")\n# Генерация конечной точки GraphQL\ndef generate_graphql_endpoint():\n    graphql_config = config[\"graphql\"]\n    return f\"{graphql_config['protocol']}://{graphql_config['url']}:{graphql_config['port']}{graphql_config['endpoint']}\"\nendpoint = generate_graphql_endpoint()\n# Конвертация времени из UTC в локальное\ndef convert_utc_to_local(timestamp_utc):\n    timestamp_datetime = datetime.strptime(timestamp_utc, \"%Y-%m-%dT%H:%M:%S%z\")\n    timestamp_local = timestamp_datetime.astimezone(local_tz)",
        "detail": "runner",
        "documentation": {}
    },
    {
        "label": "endpoint",
        "kind": 5,
        "importPath": "runner",
        "description": "runner",
        "peekOfCode": "endpoint = generate_graphql_endpoint()\n# Конвертация времени из UTC в локальное\ndef convert_utc_to_local(timestamp_utc):\n    timestamp_datetime = datetime.strptime(timestamp_utc, \"%Y-%m-%dT%H:%M:%S%z\")\n    timestamp_local = timestamp_datetime.astimezone(local_tz)\n    return timestamp_local.strftime(\"%Y-%m-%dT%H:%M:%S%z\")\n# Получение информации о системе\ndef get_system_info():\n    hostname = platform.node()\n    os_version = platform.version()",
        "detail": "runner",
        "documentation": {}
    }
]